#include <stdio.h>
#include <cmath>

const int diff_max_len = 17;

/*
random in G1, random in G2, random in GT, random in Zr,
hash to G1, hash to G2, hash to GT, hash to Zr,
mul in G1, mul in G2, mul in GT, mul in Zr,
pow in G1, pow in G2, pow in GT, pow in Zr,
pairing
*/
// const double op_time[][diff_max_len] = {
//     {0.637695, 0.618164, 0.071289, 0.006836, 1.353516, 1.348633, 0.056641, 0.000000, 0.001953, 0.001953, 0.000000, 0.000000, 0.590820, 0.594727, 0.043945, 0.001953, 0.358398},
//     {0.306641, 0.309570, 0.032227, 0.006836, 0.288086, 0.285156, 0.018555, 0.000000, 0.004883, 0.004883, 0.000000, 0.000000, 7.714844, 7.634766, 0.650391, 0.157227, 7.757812},
//     {1.197266, 1.196289, 0.139648, 0.006836, 5.679688, 6.118164, 0.133789, 0.000000, 0.004883, 0.004883, 0.000000, 0.000000, 1.181641, 1.187500, 0.027344, 0.001953, 1.072266},
//     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
//     {0.508789, 0.862305, 8.493164, 0.005859, 0.014648, 0.032227, 8.004883, 0.000000, 0.000977, 0.001953, 0.008789, 0.000000, 0.488281, 0.847656, 2.701172, 0.005859, 12.689453},
//     {0.216797, 1.751953, 0.259766, 0.006836, 0.009766, 5.080078, 0.201172, 0.000000, 0.000000, 0.007812, 0.001953, 0.000000, 0.213867, 1.742188, 0.406250, 0.001953, 1.392578},
//     {0.307617, 2.323242, 0.335938, 0.006836, 0.045898, 6.704102, 0.289062, 0.000000, 0.000977, 0.008789, 0.001953, 0.000000, 0.294922, 2.260742, 0.509766, 0.001953, 1.800781},
//     {0.387695, 2.856445, 0.339844, 0.006836, 0.023438, 8.340820, 0.296875, 0.000000, 0.001953, 0.008789, 0.001953, 0.000000, 0.377930, 2.811523, 0.617188, 0.003906, 2.242188},
//     {0.316406, 2.331055, 0.326172, 0.006836, 0.048828, 6.683594, 0.288086, 0.000000, 0.000977, 0.009766, 0.001953, 0.000000, 0.299805, 2.309570, 0.527344, 0.002930, 1.844727},
//     {0.234375, 1.868164, 0.268555, 0.006836, 0.025391, 5.682617, 0.227539, 0.000000, 0.000977, 0.007812, 0.001953, 0.000000, 0.237305, 1.868164, 0.441406, 0.001953, 1.532227},
//     {0.297852, 2.187500, 0.292969, 0.006836, 0.048828, 5.575195, 0.241211, 0.000000, 0.000977, 0.007812, 0.001953, 0.000000, 0.285156, 2.140625, 0.470703, 0.001953, 1.728516},
//     {0.220703, 0.426758, 4.806641, 0.006836, 0.003906, 0.010742, 4.717773, 0.000000, 0.000000, 0.000977, 0.007812, 0.000000, 0.208008, 0.416992, 1.590820, 0.001953, 7.059570},
//     {0.207031, 3.886719, 1.705078, 0.006836, 0.006836, 23.458984, 1.584961, 0.000000, 0.000000, 0.015625, 0.005859, 0.000000, 0.195312, 3.971680, 1.148438, 0.001953, 4.281250}
// };
const double op_time[][diff_max_len] = {
    {2.917969, 2.966797, 0.500977, 0.070312, 5.791992, 5.848633, 0.345703, 0.000977, 0.011719, 0.011719, 0.000977, 0.000000, 2.630859, 2.639648, 0.281250, 0.010742, 2.217773},
    {2.037109, 2.096680, 0.275391, 0.074219, 1.824219, 1.824219, 0.114258, 0.003906, 0.029297, 0.026367, 0.004883, 0.000977, 38.249023, 37.925781, 4.788086, 1.226562, 57.399414},
    {6.480469, 6.376953, 1.102539, 0.082031, 27.805664, 28.082031, 0.944336, 0.000977, 0.026367, 0.025391, 0.000977, 0.000000, 5.743164, 5.750000, 0.188477, 0.010742, 7.562500},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {2.271484, 4.073242, 44.955078, 0.071289, 0.077148, 0.166992, 41.684570, 0.000977, 0.004883, 0.005859, 0.043945, 0.000000, 2.059570, 3.728516, 14.328125, 0.031250, 63.917969},
    {1.023438, 8.074219, 1.350586, 0.070312, 0.042969, 24.103516, 0.842773, 0.000977, 0.004883, 0.036133, 0.009766, 0.000000, 0.871094, 7.589844, 1.828125, 0.009766, 5.939453},
    {1.384766, 10.798828, 1.873047, 0.066406, 0.204102, 34.539062, 1.302734, 0.000977, 0.004883, 0.040039, 0.010742, 0.000000, 1.234375, 9.872070, 2.376953, 0.012695, 7.708008},
    {1.710938, 13.176758, 1.860352, 0.071289, 0.131836, 39.364258, 1.337891, 0.000977, 0.004883, 0.041992, 0.010742, 0.000000, 1.600586, 12.269531, 2.979492, 0.025391, 9.636719},
    {1.429688, 11.559570, 1.799805, 0.072266, 0.252930, 33.970703, 1.255859, 0.000977, 0.003906, 0.041992, 0.010742, 0.000000, 1.270508, 10.044922, 2.405273, 0.011719, 8.127930},
    {1.054688, 7.901367, 1.308594, 0.073242, 0.107422, 24.378906, 0.891602, 0.000977, 0.002930, 0.032227, 0.007812, 0.000000, 0.897461, 7.704102, 1.847656, 0.010742, 6.160156},
    {1.317383, 10.286133, 1.646484, 0.082031, 0.270508, 27.428711, 1.009766, 0.000000, 0.002930, 0.022461, 0.004883, 0.000000, 1.215820, 9.362305, 2.202148, 0.012695, 7.417969},
    {0.993164, 1.939453, 26.019531, 0.073242, 0.020508, 0.047852, 24.277344, 0.000977, 0.002930, 0.005859, 0.043945, 0.000000, 0.852539, 1.811523, 8.274414, 0.010742, 35.073242},
    {0.948242, 15.711914, 8.475586, 0.081055, 0.035156, 110.878906, 6.709961, 0.000977, 0.002930, 0.075195, 0.027344, 0.000000, 0.809570, 14.789062, 5.080078, 0.011719, 18.474609}
};

bool out_time(int type, int ops[diff_max_len], double real_time) {
    double expect_time = 0;
    for(int i = 0; i < diff_max_len; i++) expect_time += op_time[type][i] * ops[i];
    double diff = real_time - expect_time;
    double diff_percent = (diff) * 100 / (expect_time + 1e-6);
    if(expect_time < 1e-6) diff_percent = 0;
    printf("type %d: expect_time = %lf ms, real_time = %lf ms, diff = ", type, expect_time, real_time);
    if(fabs(diff) < 0.05) printf("%.2lf", diff);
    else if(fabs(diff) < 0.1) printf("\033[1;33;40m%.2lf\033[0m", diff);
    else printf("\033[1;31;40m%.2lf\033[0m", diff);
    printf(" ms (");
    if(fabs(diff_percent) < 5) printf("%.2lf%%", diff_percent);
    else if(fabs(diff_percent) < 10) printf("\033[1;33;40m%.2lf%%\033[0m", diff_percent);
    else printf("\033[1;31;40m%.2lf%%\033[0m", diff_percent);
    printf(")\n");
    return fabs(diff_percent) < 10 || fabs(diff) < 0.1;
}